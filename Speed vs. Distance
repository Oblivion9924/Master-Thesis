import matplotlib.pyplot as plt
import numpy as np

# Constants
initial_velocity = 0  # m/s
v_max = 25 / 3.6  # m/s
acceleration = 0.1  # m/s^2
deceleration = -0.1  # m/s^2

# Stop locations and distances
stops = [1000, 185, 425, 300, 300, 425, 185, 1000]  # Distances to stop in meters

# Create lists to store velocity, distance values, and segment details
velocity = []
distance_covered = []
segment_details = []

# Iterate through each segment between stops
for i in range(len(stops)):
    segment_info = {}
    distance_segment = stops[i]  # Distance to the current stop
    # Calculate time taken to reach max speed with constant acceleration
    t_acceleration = (v_max - initial_velocity) / acceleration
    # Calculate distance covered during acceleration phase
    d_acceleration = 0.5 * acceleration * t_acceleration ** 2
    # Calculate time taken to stop from max speed with constant deceleration
    t_deceleration = v_max / abs(deceleration)
    # Calculate distance covered during deceleration phase
    d_deceleration = 0.5 * abs(deceleration) * t_deceleration ** 2

    # Condition 1: Large enough to reach v_max
    if distance_segment >= (d_acceleration + d_deceleration):
        v_peak = v_max
        d_coasting = distance_segment - (d_acceleration + d_deceleration)
        t_coasting = d_coasting / v_max
        segment_info['acceleration'] = (initial_velocity, acceleration * t_acceleration, 0, d_acceleration)
        segment_info['coasting'] = (acceleration * t_acceleration, acceleration * t_acceleration, d_acceleration, d_acceleration + d_coasting)
        segment_info['deceleration'] = (acceleration * t_acceleration, 0, d_acceleration + d_coasting, distance_segment)

    # Condition 2: Prioritize having a speed-hold phase
    elif distance_segment > 2 * d_acceleration:
        remaining_distance = distance_segment - d_acceleration
        d_coasting = remaining_distance - d_acceleration
        v_peak = np.sqrt(2 * acceleration * d_acceleration)
        t_coasting = d_coasting / v_peak
        t_deceleration = v_peak / abs(deceleration)
        segment_info['acceleration'] = (initial_velocity, v_peak, 0, d_acceleration)
        segment_info['coasting'] = (v_peak, v_peak, d_acceleration, d_acceleration + d_coasting)
        segment_info['deceleration'] = (v_peak, 0, d_acceleration + d_coasting, distance_segment)

    # Condition 3: Divide the distance in two
    else:
        d_acceleration = distance_segment / 2
        d_deceleration = d_acceleration
        t_acceleration = np.sqrt(2 * d_acceleration / acceleration)
        t_deceleration = np.sqrt(2 * d_deceleration / abs(deceleration))
        v_peak = acceleration * t_acceleration
        t_coasting = 0
        d_coasting = 0
        segment_info['acceleration'] = (initial_velocity, v_peak, 0, d_acceleration)
        segment_info['deceleration'] = (v_peak, 0, d_acceleration, distance_segment)

    segment_details.append(segment_info)

    total_time = t_acceleration + t_deceleration + t_coasting
    # Iterate over the segment with time steps
    time_step = 0.1  # Time step for simulation
    t = 0
    while t <= total_time:
        # Acceleration phase
        if t <= t_acceleration:
            v = initial_velocity + acceleration * t
        # Coasting phase
        elif t <= (total_time - t_deceleration):
            v = v_peak
        # Deceleration phase
        else:
            v = v_peak + deceleration * (t - (total_time - t_deceleration))

        x = initial_velocity * t + 0.5 * acceleration * t ** 2 if t <= t_acceleration else (
            d_acceleration + v_peak * (t - t_acceleration) if t <= (total_time - t_deceleration) else (
                distance_segment - 0.5 * abs(deceleration) * (total_time - t) ** 2
            )
        )

        velocity.append(v)
        distance_covered.append(x + sum(stops[:i]))  # Adjust distance for previous stops

        t += time_step

# Print segment details for each stop
for idx, segment in enumerate(segment_details, start=1):
    print(f"Stop {idx}:")
    for phase, values in segment.items():
        print(f"{phase.capitalize()}: Start Speed: {values[0]:.2f} m/s, End Speed: {values[1]:.2f} m/s, Start Distance: {values[2]:.2f} m, End Distance: {values[3]:.2f} m")
    print()


##################################################
# Plotting
fig = plt.figure()

ax1 = fig.add_subplot(111)
ax2 = ax1.twiny()

# Adjust for the twin axis at the bottom
fig.subplots_adjust(bottom=0.2)
ax1.plot(distance_covered, velocity)
plt.title('Driving profile of the route with stops')
ax1.set_xlabel('Distance (m)')
ax1.set_ylabel('Speed (m/s)')

new_tick_locations = np.array([0, 1000, 1185, 1610, 1910, 2210, 2635, 2820, 3820])
labels = ['Start', 'h1', 'h2', 'h3', 'end', 'h5', 'h6', 'h7', 'Start']

ax1.set_ylim(bottom=0)
ax2.set_xlim(ax1.get_xlim())

# Adjust twin axis
ax2.xaxis.set_ticks_position("bottom")
ax2.xaxis.set_label_position("bottom")
ax2.spines["bottom"].set_position(("axes", -0.15))
ax2.set_frame_on(True)
ax2.patch.set_visible(False)
for sp in ax2.spines.values():
    sp.set_visible(False)
ax2.spines["bottom"].set_visible(True)

ax2.set_xticks(new_tick_locations)
ax2.set_xticklabels(labels)

plt.grid(True)
plt.show()

